extends layout.pug

block content
  .container
    // ASCII Art at the top
    .ascii-art
      pre
        |   ______                    _ ____     
        |  /_  __/__  _________ ___  (_) __/_  __
        |   / / / _ \/ ___/ __ `__ \/ / /_/ / / /
        |  / / /  __/ /  / / / / / / / __/ /_/ / 
        | /_/  \___/_/  /_/ /_/ /_/_/_/  \__, /  
        |                              /____/  

    .terminal
      // Instructions remain
      p.instr-command-line
        span.instr Greetings #{user.display_name}, Welcome to Termify
      p.instr-command-line
        span.instr Type 
        span.command '4weeks' 
        span.instr to display top tracks from past 4 weeks
      p.instr-command-line
        span.instr Type 
        span.command '6months' 
        span.instr to display top tracks from past 6 months
      p.instr-command-line
        span.instr Type 
        span.command 'year' 
        span.instr to display top tracks from past year
      p.instr-command-line
        span.instr Type 
        span.command 'logout' 
        span.instr to... make a pizza?

      // Command line for user input
      p.command-line
        span #{user.display_name.trim()}@termify:~$
        input#command-input(type='text', placeholder='', autocomplete='off')

      // Output container for command feedback and tracks
      .output-container
        .output-area
      .tracks-container
        each track, index in tracks
          .track.hidden
            span.track-number(data-number=`${(index + 1).toString().padStart(2, '0')}`)
            span.track-name(data-track=`${track.name}`)
            span.track-artist(data-artist=`${track.artists[0].name}`)

  script.
    document.addEventListener('DOMContentLoaded', () => {
      const commandInput = document.getElementById('command-input');
      const outputArea = document.querySelector('.output-area');
      const tracksContainer = document.querySelector('.tracks-container');

      // Automatically focus the input without clicking
      commandInput.focus();

      // Function to simulate typing effect for text
      function typeText(element, text, speed, callback) {
        let i = 0;
        function type() {
          if (i < text.length) {
            element.textContent += text.charAt(i);
            i++;
            setTimeout(type, speed); // Delay between each character
          } else {
            if (callback) callback(); // Call the callback after typing is done
          }
        }
        type();
      }

      // Function to display typed messages in the terminal
      function displayTypedMessage(text, className, callback) {
        outputArea.innerHTML = ''; // Clear previous outputs
        const outputLine = document.createElement('p');
        outputLine.classList.add('command-output'); // Base class for all messages
        if (className) {
          outputLine.classList.add(className); // Add specific class for info or error
        }
        outputArea.appendChild(outputLine);
        typeText(outputLine, text, 10, callback); // Typing effect for the message
      }


      // Function to display the next track, one by one
      function typeNextTrack(tracks) {
        let currentIndex = 0; // Reset the index
        tracksContainer.innerHTML = ''; // Clear previous tracks

        function typeNext() {
          if (currentIndex < tracks.length) {
            const trackElement = document.createElement('div');
            trackElement.classList.add('track');

            const trackNumber = document.createElement('span');
            trackNumber.classList.add('track-number');
            const trackName = document.createElement('span');
            trackName.classList.add('track-name');
            const trackArtist = document.createElement('span');
            trackArtist.classList.add('track-artist');

            // Add elements to the track element
            trackElement.appendChild(trackNumber);
            trackElement.appendChild(trackName);
            trackElement.appendChild(trackArtist);
            tracksContainer.appendChild(trackElement);

            // Set the track number
            trackNumber.textContent = `${(currentIndex + 1).toString().padStart(2, '0')}`;

            const track = tracks[currentIndex];
            const nameText = ` ${track.name} - `;
            const artistText = track.artists[0].name;

            // First type out the track name, then the artist name
            typeText(trackName, nameText, 8, () => {
              typeText(trackArtist, artistText, 8, () => {
                currentIndex++;
                typeNext(); // Start typing the next track after this one finishes
              });
            });
          }
        }

        typeNext(); // Start typing the first track
      }

      // Fetch top tracks based on the time range
      async function fetchTopTracks(timeRange) {
        const response = await fetch(`/get-top-tracks?time_range=${timeRange}`);
        const data = await response.json();
        typeNextTrack(data.items); // Start typing out the fetched tracks
      }

      // Handle command input
      commandInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          const command = commandInput.value.trim().toLowerCase();

          // Clear previous outputs and tracks when new command is executed
          outputArea.innerHTML = ''; // Clear terminal messages
          tracksContainer.innerHTML = ''; // Clear track list

          if (command === '4weeks') {
            displayTypedMessage("Fetching top tracks from the past 4 weeks...", 'info-message', () => {
              fetchTopTracks('short_term'); // Fetch tracks from past 4 weeks
            });
          } else if (command === '6months') {
            displayTypedMessage("Fetching top tracks from the past 6 months...", 'info-message', () => {
              fetchTopTracks('medium_term'); // Fetch tracks from past 6 months
            });
          } else if (command === 'year') {
          displayTypedMessage("Fetching top tracks from the past year...", 'info-message', () => {
            fetchTopTracks('long_term'); // Fetch tracks from past 6 months
          });
          } else if (command === 'logout') {
            displayTypedMessage("Logging out...", 'info-message', () => {
            window.location.href = '/logout'; // Redirect to the logout route
            });
          } else {
            displayTypedMessage("Invalid command" , 'error-message'); // Display "Invalid command" in the terminal
          }

          commandInput.value = ''; // Clear input after submission
        }
      });

      typeNextTrack([]); // Initially display an empty list
    });
